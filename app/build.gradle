apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "androidx.navigation.safeargs.kotlin"

apply plugin: 'jacoco'

apply plugin: 'dagger.hilt.android.plugin'

jacoco {
    toolVersion = "0.8.4"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    @SuppressWarnings("GroovyAccessiblity")
    sourceDirectories = files([mainSrc])
    @SuppressWarnings("GroovyAccessiblity")
    classDirectories = files([debugTree])
    @SuppressWarnings("GroovyAccessiblity")
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}

android {
    compileSdkVersion Release.compileSdkVersion
    defaultConfig {
        applicationId ApplicationId.id
        minSdkVersion Release.minSdkVersion
        targetSdkVersion Release.targetSdkVersion
        versionCode Release.versionCode
        versionName Release.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures{
        dataBinding = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        /*execution 'ANDROIDX_TEST_ORCHESTRATOR'*/
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }

    androidExtensions {
        experimental = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    //support
    implementation Dependencies.kotlin
    implementation Support.appCompat
    implementation Support.core
    implementation Support.constraintLayout
    implementation Support.materialComponent
    implementation Support.legacySupport
    implementation Support.lifeCycleExtensions

    //navigation
    api Arch.navigationFragment
    api Arch.navigationKtx

    //reactivex
    implementation Reactivex.kotlin
    implementation Reactivex.android

    //unittest
    testImplementation TestLibs.junit
    androidTestImplementation TestLibs.testRunner

    //Mockito
    testImplementation UnitTest.mockitoCore
    testImplementation UnitTest.mockitoInline
    testImplementation UnitTest.coreTesting
    testImplementation UnitTest.mockitoKotlin
    testImplementation UnitTest.daggerMock
    testImplementation UnitTest.kotlinTest

    //Espresso
    androidTestImplementation UiTestCase.espressoCore
    androidTestImplementation UiTestCase.espressocontrib
    androidTestImplementation UiTestCase.espressorunner
    androidTestImplementation UiTestCase.espressorules

    //Logger
    implementation Log.timber

    //Image loading
    implementation Image.glide
    kapt Image.glideCompiler

    //network
    api Retrofit.retrofit
    api Retrofit.gsonConverter
    api Retrofit.adapterRxJava
    api Retrofit.loggingInterceptor
    api Json.gson

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:30.1.0')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // database
    implementation 'androidx.room:room-ktx:2.2.5'
    kapt 'androidx.room:room-compiler:2.2.5'

    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'

    def hilt_version = "2.37"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    def hilt_viewmodels = "1.0.0-alpha02"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt "androidx.hilt:hilt-compiler:$hilt_viewmodels"
}
