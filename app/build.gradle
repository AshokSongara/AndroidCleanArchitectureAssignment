apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "androidx.navigation.safeargs.kotlin"

apply plugin: 'jacoco'

apply plugin: 'dagger.hilt.android.plugin'

jacoco {
    toolVersion = "0.8.4"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    @SuppressWarnings("GroovyAccessiblity")
            sourceDirectories = files([mainSrc])
    @SuppressWarnings("GroovyAccessiblity")
            classDirectories = files([debugTree])
    @SuppressWarnings("GroovyAccessiblity")
            executionData = fileTree(dir: project.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
            ])
}

android {
    compileSdkVersion Release.compileSdkVersion
    defaultConfig {
        applicationId ApplicationId.id
        minSdkVersion Release.minSdkVersion
        targetSdkVersion Release.targetSdkVersion
        versionCode Release.versionCode
        versionName Release.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        dataBinding = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        /*execution 'ANDROIDX_TEST_ORCHESTRATOR'*/
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }

    androidExtensions {
        experimental = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    //support
    implementation Dependencies.kotlin
    implementation Support.appCompat
    implementation Support.core
    implementation Support.constraintLayout
    implementation Support.materialComponent
    implementation Support.legacySupport
    implementation Support.lifeCycleExtensions

    //navigation
    api Arch.navigationFragment
    api Arch.navigationKtx

    //reactivex
    implementation Reactivex.kotlin
    implementation Reactivex.android
    implementation 'androidx.test.ext:junit-ktx:1.1.3'
    implementation 'androidx.test:core-ktx:1.4.0'

    //unittest
    testImplementation TestLibs.junit
    androidTestImplementation TestLibs.testRunner

    //Mockito
    testImplementation UnitTest.mockitoCore
    testImplementation UnitTest.mockitoInline
    testImplementation UnitTest.coreTesting
    testImplementation UnitTest.mockitoKotlin
    testImplementation UnitTest.kotlinTest

    //Espresso
    androidTestImplementation UiTestCase.espressoCore
    androidTestImplementation UiTestCase.espressocontrib
    androidTestImplementation UiTestCase.espressorunner
    androidTestImplementation UiTestCase.espressorules

    //Logger
    implementation Log.timber

    //Image loading
    implementation Image.glide
    kapt Image.glideCompiler

    //network
    api Retrofit.retrofit
    api Retrofit.gsonConverter
    api Retrofit.adapterRxJava
    api Retrofit.loggingInterceptor
    api Json.gson

    // database
    implementation Room.room
    kapt Room.roomCompiler

    // coroutines
    implementation Coroutine.coroutineAndroid
    implementation Coroutine.coroutineCore

    implementation Hilt.hilt
    kapt Hilt.hiltCompiler
//    kaptTest UnitTest.hiltTest
//    kaptAndroidTest UnitTest.hiltTest
//    androidTestAnnotationProcessor UnitTest.hiltTest

    androidTestImplementation("com.google.dagger:hilt-android-testing:2.38.1")
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:2.38.1")
    implementation("com.google.dagger:hilt-android:2.38.1") //hilt dependency

    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support.test.espresso:espresso-idling-resource:3.0.2'

    implementation Hilt.hiltViewModel
    kapt Hilt.hiltViewModelCompiler
}
